version: '3'

volumes:
  elasticsearch:
    driver: ${VOLUMES_DRIVER}

services:
  ### PHP-FPM Container #######################################  
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
      #dockerfile: "Dockerfile-${PHP_VERSION}"
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini

      # 和下面nginx一样
      # - /Users/edz/Desktop/code:/var/www
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    networks:
      - backend

  ### NGINX Server Container ##################################      
  nginx:
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
      - 81:81
      - 82:82
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available

      # 将本地代码挂在到容器
      # - /Users/edz/Desktop/code:/var/www
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

  ### MySQL Container #########################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    # 设置镜像变量
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
      #- ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  ### Redis Container #########################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_SAVE_PATH}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  ### ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
        - INSTALL_IK_PLUGIN=${INSTALL_IK_PLUGIN}
    volumes:
      # 卷标 docker volume ls 
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=yy-cluster
      - node.name=yy-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=yy-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
      - backend

  ### Logstash ##############################################
  logstash:
    build:
      context: ./logstash
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
      - './logstash/pipeline:/usr/share/logstash/pipeline'
    ports:
      - '5001:5001'
    environment:
      LS_JAVA_OPTS: '-Xmx1g -Xms1g'
    # 环境变量，根目录
    # env_file:
    #   - .envtest
    networks:
      - frontend
      - backend
    depends_on:
      - elasticsearch

  ### Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend

  ### Hadoop Container #########################################
  hadoop:
    build: ./hadoop
    #
    container_name: hadoop
    hostname: hadoop001
    ports:
      - '22:22'
      # api端口
      - '8020:8020'
      - '9000:9000'
      # datanode数据传输端口
      - '9864:9864'
      - '9866:9866'
      - '9867:9867'
      # webui
      - '9870:9870'
      - '8088:8088'
      #
      - '10020:10020'
      - '19888:19888'
      - '8030:8030'
      - '8031:8031'
      - '8032:8032'
      - '8040:8040'
      - '8042:8042'
      - '8033:8033'
      - '9868:9868'
      - '13562:13562'
      - '32851:32851'
    # 防止自动退出
    stdin_open: true
    tty: true
    networks:
      - backend

  ### 
  spark:
    build: ./spark
    ports:
      - '4040:4040'
      - '8080:8080'
      - '7077:7077'
    stdin_open: true
    tty: true
    networks:
      - backend

  ### Tomcat Container #########################################
  tomcat:
    build: ./tomcat
    # volumes:
    #   - ${DATA_SAVE_PATH}/redis:/data
    ports:
      - "8081:8081"
    networks:
      - backend

  ### Nacos Container #########################################
  nacos:
    build: ./nacos
    ports:
      - "8848:8848"
    networks:
      - backend

### Networks Setup ############################################
networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
